################## remove duplicate number in the array ##############

int removeDuplicate(vector<int> & nums){
  sort(nums.begin(), nums.end());
  for(int n :nums)
  {
     
   if(n > nums[i])
   nums[i++] = n; 
  }
  return i;               // return length
}

################## remove duplicate char in the array ##############

string removeDuplicate(string & str){
  sort(str.begin(), str.end());
  for(auto & c :str)
  {
     
   if(c > str[i])
   str[i++] = c; 
  }
  return str;               // return a string
}

##################  rotation #######################

void rotate(vector<int> & nums){
vector<int> tmp;
for(int i= 0; i< nums.size(); i++)
    tmp[(i+k)% nums.size()] =nums[i];

for(int j=0; j < nums.size(); j++)
   nums[j] = tmp[j];
}

##################  find duplicate #######################

bool containsDuplicate(vector<int>& nums) {
     set<int> set;
     for(auto & n : nums){
         if(s.find(n) != s.end())
            return true;
         s.insert(n);
     
     }
  return false;
}

################## Maximum Subarray ######################

int maxSubArray(vector<int> & nums){

int curMax = nums[0], preMax[0];
for(int i =0; i< nums.size(); i++){
    preMax +=max(preMax,nums[i])                    // 如果前面連續總和比較nums小重新開始
    curMax = max(curMax,preMax );
}
     
 return curMax;

}

################## shuffle Array ######################
void



